{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "bundle": {
      "name": "bundle",
      "description": "Prepare assets",
      "steps": [
        {
          "spawn": "bundle:posts/create.lambda"
        },
        {
          "spawn": "bundle:posts/get-post.server"
        }
      ]
    },
    "bundle:posts/create.lambda": {
      "name": "bundle:posts/create.lambda",
      "description": "Create a JavaScript bundle from src/posts/create.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/posts/create.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"assets/posts/create.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/*"
        }
      ]
    },
    "bundle:posts/create.lambda:watch": {
      "name": "bundle:posts/create.lambda:watch",
      "description": "Continuously update the JavaScript bundle from src/posts/create.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/posts/create.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"assets/posts/create.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/* --watch"
        }
      ]
    },
    "bundle:posts/get-post.server": {
      "name": "bundle:posts/get-post.server",
      "description": "Create a JavaScript bundle from src/posts/get-post.server.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/posts/get-post.server.ts --target=\"node18\" --platform=\"node\" --outfile=\"assets/posts/get-post.server/index.js\" --tsconfig=\"tsconfig.dev.json\""
        }
      ]
    },
    "bundle:posts/get-post.server:watch": {
      "name": "bundle:posts/get-post.server:watch",
      "description": "Continuously update the JavaScript bundle from src/posts/get-post.server.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/posts/get-post.server.ts --target=\"node18\" --platform=\"node\" --outfile=\"assets/posts/get-post.server/index.js\" --tsconfig=\"tsconfig.dev.json\" --watch"
        }
      ]
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compile": {
      "name": "compile",
      "description": "Only compile"
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "ts-node --project tsconfig.dev.json .projenrc.ts"
        }
      ]
    },
    "deploy": {
      "name": "deploy",
      "steps": [
        {
          "spawn": "compile"
        },
        {
          "exec": "npx cdk deploy --profile sandbox --method=direct --require-approval=never",
          "receiveArgs": true
        }
      ]
    },
    "destroy": {
      "name": "destroy",
      "description": "Destroys your cdk app in the AWS cloud",
      "steps": [
        {
          "exec": "cdk destroy",
          "receiveArgs": true
        }
      ]
    },
    "dia": {
      "name": "dia",
      "steps": [
        {
          "exec": "npx cdk-dia --rendering cytoscape-html"
        },
        {
          "exec": "npx http-server diagram -o"
        }
      ]
    },
    "diff": {
      "name": "diff",
      "description": "Diffs the currently deployed app against your code",
      "steps": [
        {
          "exec": "cdk diff"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern test build-tools projenrc .projenrc.ts"
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "npm install"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "npm ci"
        }
      ]
    },
    "integ": {
      "name": "integ",
      "steps": [
        {
          "exec": "yarn integ-runner"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package"
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation",
      "steps": [
        {
          "spawn": "synth:silent"
        }
      ]
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation"
    },
    "synth": {
      "name": "synth",
      "description": "Synthesizes your cdk app into cdk.out",
      "steps": [
        {
          "exec": "cdk synth"
        }
      ]
    },
    "synth:silent": {
      "name": "synth:silent",
      "description": "Synthesizes your cdk app into cdk.out and suppresses the template in stdout (part of \"yarn build\")",
      "steps": [
        {
          "exec": "npx cdk synth -q --build \"yarn projen && yarn projen compile && yarn projen bundle\""
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "jest --passWithNoTests --updateSnapshot",
          "receiveArgs": true
        },
        {
          "spawn": "eslint"
        },
        {
          "spawn": "integ"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "npm update npm-check-updates"
        },
        {
          "exec": "npm-check-updates --dep dev --upgrade --target=minor"
        },
        {
          "exec": "npm-check-updates --dep bundle --upgrade --target=minor"
        },
        {
          "exec": "npm-check-updates --dep peer --upgrade --target=minor"
        },
        {
          "exec": "npm-check-updates --dep prod --upgrade --target=minor"
        },
        {
          "exec": "npm-check-updates --dep optional --upgrade --target=minor"
        },
        {
          "exec": "npm install"
        },
        {
          "exec": "npm update @aws-lambda-powertools/commons @aws-lambda-powertools/logger @aws-lambda-powertools/metrics @aws-lambda-powertools/tracer @aws-sdk/client-dynamodb @aws-sdk/util-dynamodb @swc/core @swc/helpers @types/aws-lambda @types/express @types/jest @types/node @types/supertest @typescript-eslint/eslint-plugin @typescript-eslint/parser aws-cdk aws-sdk-client-mock aws-xray-sdk case cdk-dia esbuild eslint-config-prettier eslint-import-resolver-node eslint-import-resolver-typescript eslint-plugin-import eslint-plugin-prettier eslint jest jest-junit npm-check-updates prettier projen supertest ts-jest ts-node typescript @aws-cdk/aws-redshift-alpha @aws-cdk/integ-runner @aws-cdk/integ-tests-alpha @cdklabs/cdk-validator-cfnguard aws-cdk-lib cdk-monitoring-constructs constructs express hall-constructs node-fetch"
        },
        {
          "exec": "npx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watches changes in your source code and rebuilds and deploys to the current account",
      "steps": [
        {
          "exec": "cdk deploy --hotswap"
        },
        {
          "exec": "cdk watch"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node --print process.env.PATH\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \"npx projen\"."
}
